---
import Layout from '../layouts/Layout.astro';
import InformacionLibro from '../components/InformacionLibro.astro';
import Sinopsis from '../components/Sinopsis.astro';
import { db, User, Session, Libros, ListaSeguimiento, ListaTerminados } from 'astro:db';
import { eq } from 'astro:db';

if(Astro.locals.user){
    const user = Astro.locals.user!;
    const usuarios = await db.select().from(User).where(eq(User.id, user.id));
    const [infoUser] = usuarios;
    const alias = infoUser.aliasUsuario;
    const id = infoUser.id;
    Astro.props.userAlias = alias;
    Astro.props.userId = id;
}
const { userAlias, userId } = Astro.props;
---

<Layout title="Información del libro">
  
    <InformacionLibro/>
    <Sinopsis/>
   
      

</Layout>


<script>
  const params = new URLSearchParams(location.search);
  const idLibro = params.get('idLibro');

  try {
      const response = await fetch(`/api/informacionLibro/${idLibro}`);
      if (response.ok) {
        const data = await response.json();
        mostrarLibroEnPantalla(data);
        obtenerMasLibrosAutor(data[0].nombreAutor);
      } else {
        console.error('Error en la solicitud:', response.statusText);
      }
  } catch (error) {
    console.error('Error en la solicitud:', error);
  }

  function mostrarLibroEnPantalla(data: any) {
    const seccionInfoLibro = document.getElementById('seccionInfoLibro');
    const seccionSinopsis = document.getElementById('seccionSinopsis');
    var nombreLibro = document.getElementById('nombreLibro');
    var nombreAutor = document.getElementById('nombreAutor');
    var imagenLibro = document.getElementById('imagenLibro');
    var sinopsisLibro = document.getElementById('sinopsisLibro');
    var numPaginasLibro = document.getElementById('numPaginasLibro');
    var fechaPubliLibro = document.getElementById('fechaPubliLibro');
    var generoLibro = document.getElementById('generoLibro');
    var nombreAutorSelect;

    if (seccionInfoLibro && seccionSinopsis) {
      data.forEach((libro: any) => {
        if(imagenLibro && nombreLibro && nombreAutor && sinopsisLibro && numPaginasLibro && fechaPubliLibro && generoLibro){
          nombreLibro.innerHTML = libro.tituloLibro;
          nombreAutor.innerHTML = libro.nombreAutor;
          nombreAutorSelect = libro.nombreAutor;
          imagenLibro.setAttribute('src', libro.portadaLibro);
          seccionInfoLibro.style.backgroundImage = "url('" + libro.fondoLibro + "')";
          sinopsisLibro.innerHTML = libro.sinopsisLibro;
          numPaginasLibro.innerHTML = libro.nPaginasLibro;
          generoLibro.innerHTML = libro.categoriaLibro;

          var fechaPubLibro = formatearFecha(libro.fechaPubLibro);
          fechaPubliLibro.innerHTML = fechaPubLibro;
        }
      });
    }
  }

  function formatearFecha(fechaPubLibro: Date){
    var fecha = new Date(fechaPubLibro);
    var dia = fecha.getDate();
    var mes = fecha.getMonth() + 1;
    var año = fecha.getFullYear();
    var fechaFormateada = (dia < 10 ? '0' : '') + dia + '-' + (mes < 10 ? '0' : '') + mes + '-' + año;
    return fechaFormateada;
  }

  async function obtenerMasLibrosAutor (nombreAutor: String){
    try {
      const response = await fetch(`/api/masLibrosAutor/${nombreAutor}`);
      if (response.ok) {
        const data = await response.json();
        mostrarMasLibrosDelAutor(data);
      } else {
        console.error('Error en la solicitud:', response.statusText);
      }
    } catch (error) {
      console.error('Error en la solicitud:', error);
    }
  }

  function mostrarMasLibrosDelAutor(data: any){
    const divLibrosAutor = document.getElementById('divLibrosAutor');
    if(divLibrosAutor){
      divLibrosAutor.innerHTML = '';
      data.forEach((libro: any) => {
        if(libro.idLibro != idLibro){
          divLibrosAutor.innerHTML += `
          <div class="carousel-item" data-bs-interval="10000">
              <a href="InfoLibro?idLibro=${libro.idLibro}">
                  <img src="${libro.portadaLibro}" class="rounded-box transition-transform hover:scale-110" style="margin-top: 35px;margin-left: 24px;width: 149px;height: 240px;position: relative;z-index: 0;" />
              </a>
          </div>`;
        }
      });
    }
  }

  var botonVolver = document.getElementById("botonVolver");
  if(botonVolver){
    botonVolver.addEventListener("click", function() {
        window.history.back();
    });
  }

  document.querySelectorAll('.boton').forEach(boton => {
    if(boton.id === 'seguir'){
      let userId = boton.getAttribute('data-userId')!;
      boton.addEventListener('click', ()=>{
        if(idLibro && userId){
          getFollows(userId, idLibro);
        }
      });
    } else if(boton.id === 'fin'){
      let userId = boton.getAttribute('data-userId')!;
      boton.addEventListener('click', ()=>{

        if(idLibro && userId){
        getFinish(userId, idLibro)
        }
      });
    }else if(boton.id === 'valoraciones'){
      let userId = boton.getAttribute('data-userId')!;
      boton.addEventListener('click', ()=>{});
    }
  });

  function toastSuccess(msj:string){
      let toast = document.getElementById('toast');
      let msjT =document.getElementById('msjToast'); 
      if(msjT){
        msjT.innerText = msj;
      }
      if(toast){
        toast.style.display = 'block';
        setTimeout(function() {
          let opacity = 1;
          let interval = setInterval(function() {
          if (opacity <= 0) {
            clearInterval(interval); 
              toast.style.display = 'none';
          } else {
            opacity -= 0.4; 
            toast.style.opacity = opacity.toString();
          }
        }, 100);
      }, 3000);
    }
  }

  function toastError(errorMessage:string){
      let toast = document.getElementById('toastE');
      let msjT =document.getElementById('msjToastE'); 
      if(msjT){
        msjT.innerText = errorMessage;
      }
      if(toast){
        toast.style.display = 'block';
        setTimeout(function() {
          let opacity = 1;
          let interval = setInterval(function() {
          if (opacity <= 0) {
            clearInterval(interval); 
              toast.style.display = 'none';
          } else {
            opacity -= 0.4; 
            toast.style.opacity = opacity.toString();
          }
        }, 100);
      }, 3000);
    }
  }

  async function getFollows(userId:string, idLibro:string){
    try {
      const response = await fetch(`/api/insertSeguimiento/${userId}`, 
      { 
        method: 'POST', 
        body: JSON.stringify({idLibro}),
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
          
      if (response.ok) {
        const data = await response.json();
        let msj = 'Añadido a lista de seguimiento!'
        toastSuccess(msj);        
      } else {
        if(response.status === 404){
          let errorMessage = 'Error al añadir a lista de seguimiento';
          toastError(errorMessage);
        }
      }
    } catch (error) {
        console.error('Error en la solicitud:', error);
        let errorMessage = 'Error al añadir a lista de seguimiento';
        toastError(errorMessage);
    }
  }

  async function getFinish(userId:string, idLibro:string){
    try {
      const response = await fetch(`/api/insert/${userId}`, { 
        method: 'POST', 
        body: JSON.stringify({idLibro}),
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
          
      if (response.ok) {
        const data = await response.json();
        let msj = 'Añadido a lista de terminados!'
        toastSuccess(msj); 
      } else {
        if(response.status === 404){
          let errorMessage = 'Error al añadir a lista de terminados';
          toastError(errorMessage);
        }
      }
    } catch (error) {
        console.error('Error en la solicitud:', error);
        let errorMessage = 'Error al añadir a lista de terminados';
        toastError(errorMessage);
    }
  }

/*****************************************/
/*******************ESTRELLAS**********************/


const puntuacion = document.querySelectorAll<HTMLInputElement>('input[type="radio"][name="rating-8"]');
puntuacion.forEach(input => {
    input.addEventListener('change', () => {
      let userId = input.getAttribute('data-userId')!;
        const estrellas = input.value;
        console.log(estrellas);
        console.log(userId);
        console.log(idLibro);

        if(idLibro){
          getPuntuacion(userId, idLibro, estrellas);
        }
        
    });
});

async function getPuntuacion(userId:string, idLibro:string, estrellas:string){
    try {
      const response = await fetch(`/api/insertPuntuacion/${userId}`, 
      { 
        method: 'POST', 
        body: JSON.stringify({idLibro, estrellas}),
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      });
          
      if (response.ok) {
        const data = await response.json();
        console.log(data);        
      } else {
        console.log('error');
      }
    } catch (error) {
        console.log('error pero en catch');
    }
  }
</script>